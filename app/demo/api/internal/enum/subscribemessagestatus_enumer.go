// Code generated by "enumer -type=SubscribeMessageStatus -linecomment -json -sql"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SubscribeMessageStatusName = "unsentsentfailed"

var _SubscribeMessageStatusIndex = [...]uint8{0, 6, 10, 16}

const _SubscribeMessageStatusLowerName = "unsentsentfailed"

func (i SubscribeMessageStatus) String() string {
	if i < 0 || i >= SubscribeMessageStatus(len(_SubscribeMessageStatusIndex)-1) {
		return fmt.Sprintf("SubscribeMessageStatus(%d)", i)
	}
	return _SubscribeMessageStatusName[_SubscribeMessageStatusIndex[i]:_SubscribeMessageStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SubscribeMessageStatusNoOp() {
	var x [1]struct{}
	_ = x[SubscribeMessageUnsent-(0)]
	_ = x[SubscribeMessageSent-(1)]
	_ = x[SubscribeMessageFailed-(2)]
}

var _SubscribeMessageStatusValues = []SubscribeMessageStatus{SubscribeMessageUnsent, SubscribeMessageSent, SubscribeMessageFailed}

var _SubscribeMessageStatusNameToValueMap = map[string]SubscribeMessageStatus{
	_SubscribeMessageStatusName[0:6]:        SubscribeMessageUnsent,
	_SubscribeMessageStatusLowerName[0:6]:   SubscribeMessageUnsent,
	_SubscribeMessageStatusName[6:10]:       SubscribeMessageSent,
	_SubscribeMessageStatusLowerName[6:10]:  SubscribeMessageSent,
	_SubscribeMessageStatusName[10:16]:      SubscribeMessageFailed,
	_SubscribeMessageStatusLowerName[10:16]: SubscribeMessageFailed,
}

var _SubscribeMessageStatusNames = []string{
	_SubscribeMessageStatusName[0:6],
	_SubscribeMessageStatusName[6:10],
	_SubscribeMessageStatusName[10:16],
}

// SubscribeMessageStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SubscribeMessageStatusString(s string) (SubscribeMessageStatus, error) {
	if val, ok := _SubscribeMessageStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SubscribeMessageStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SubscribeMessageStatus values", s)
}

// SubscribeMessageStatusValues returns all values of the enum
func SubscribeMessageStatusValues() []SubscribeMessageStatus {
	return _SubscribeMessageStatusValues
}

// SubscribeMessageStatusStrings returns a slice of all String values of the enum
func SubscribeMessageStatusStrings() []string {
	strs := make([]string, len(_SubscribeMessageStatusNames))
	copy(strs, _SubscribeMessageStatusNames)
	return strs
}

// IsASubscribeMessageStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SubscribeMessageStatus) IsASubscribeMessageStatus() bool {
	for _, v := range _SubscribeMessageStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SubscribeMessageStatus
func (i SubscribeMessageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SubscribeMessageStatus
func (i *SubscribeMessageStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SubscribeMessageStatus should be a string, got %s", data)
	}

	var err error
	*i, err = SubscribeMessageStatusString(s)
	return err
}

func (i SubscribeMessageStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SubscribeMessageStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SubscribeMessageStatus: %[1]T(%[1]v)", value)
	}

	val, err := SubscribeMessageStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
