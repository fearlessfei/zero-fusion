// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zero-fusion/app/demo/api/internal/model"
)

func newSubscribe(db *gorm.DB, opts ...gen.DOOption) subscribe {
	_subscribe := subscribe{}

	_subscribe.subscribeDo.UseDB(db, opts...)
	_subscribe.subscribeDo.UseModel(&model.Subscribe{})

	tableName := _subscribe.subscribeDo.TableName()
	_subscribe.ALL = field.NewAsterisk(tableName)
	_subscribe.ID = field.NewInt64(tableName, "id")
	_subscribe.SubName = field.NewString(tableName, "sub_name")
	_subscribe.TemplateID = field.NewString(tableName, "template_id")
	_subscribe.SendTime = field.NewTime(tableName, "send_time")
	_subscribe.Status = field.NewInt32(tableName, "status")
	_subscribe.CreatedAt = field.NewTime(tableName, "created_at")
	_subscribe.UpdatedAt = field.NewTime(tableName, "updated_at")
	_subscribe.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_subscribe.Desc = field.NewString(tableName, "desc")

	_subscribe.fillFieldMap()

	return _subscribe
}

type subscribe struct {
	subscribeDo subscribeDo

	ALL        field.Asterisk
	ID         field.Int64
	SubName    field.String // 订阅名
	TemplateID field.String // 订阅模板id
	SendTime   field.Time   // 消息发送时间
	Status     field.Int32  // 状态：0无效 1有效
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	IsDeleted  field.Int32  // 是否已删除：0未删除 1已删除
	Desc       field.String // 描述

	fieldMap map[string]field.Expr
}

func (s subscribe) Table(newTableName string) *subscribe {
	s.subscribeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subscribe) As(alias string) *subscribe {
	s.subscribeDo.DO = *(s.subscribeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subscribe) updateTableName(table string) *subscribe {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SubName = field.NewString(table, "sub_name")
	s.TemplateID = field.NewString(table, "template_id")
	s.SendTime = field.NewTime(table, "send_time")
	s.Status = field.NewInt32(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.IsDeleted = field.NewInt32(table, "is_deleted")
	s.Desc = field.NewString(table, "desc")

	s.fillFieldMap()

	return s
}

func (s *subscribe) WithContext(ctx context.Context) ISubscribeDo {
	return s.subscribeDo.WithContext(ctx)
}

func (s subscribe) TableName() string { return s.subscribeDo.TableName() }

func (s subscribe) Alias() string { return s.subscribeDo.Alias() }

func (s subscribe) Columns(cols ...field.Expr) gen.Columns { return s.subscribeDo.Columns(cols...) }

func (s *subscribe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subscribe) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sub_name"] = s.SubName
	s.fieldMap["template_id"] = s.TemplateID
	s.fieldMap["send_time"] = s.SendTime
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["desc"] = s.Desc
}

func (s subscribe) clone(db *gorm.DB) subscribe {
	s.subscribeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subscribe) replaceDB(db *gorm.DB) subscribe {
	s.subscribeDo.ReplaceDB(db)
	return s
}

type subscribeDo struct{ gen.DO }

type ISubscribeDo interface {
	gen.SubQuery
	Debug() ISubscribeDo
	WithContext(ctx context.Context) ISubscribeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubscribeDo
	WriteDB() ISubscribeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubscribeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubscribeDo
	Not(conds ...gen.Condition) ISubscribeDo
	Or(conds ...gen.Condition) ISubscribeDo
	Select(conds ...field.Expr) ISubscribeDo
	Where(conds ...gen.Condition) ISubscribeDo
	Order(conds ...field.Expr) ISubscribeDo
	Distinct(cols ...field.Expr) ISubscribeDo
	Omit(cols ...field.Expr) ISubscribeDo
	Join(table schema.Tabler, on ...field.Expr) ISubscribeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubscribeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubscribeDo
	Group(cols ...field.Expr) ISubscribeDo
	Having(conds ...gen.Condition) ISubscribeDo
	Limit(limit int) ISubscribeDo
	Offset(offset int) ISubscribeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscribeDo
	Unscoped() ISubscribeDo
	Create(values ...*model.Subscribe) error
	CreateInBatches(values []*model.Subscribe, batchSize int) error
	Save(values ...*model.Subscribe) error
	First() (*model.Subscribe, error)
	Take() (*model.Subscribe, error)
	Last() (*model.Subscribe, error)
	Find() ([]*model.Subscribe, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Subscribe, err error)
	FindInBatches(result *[]*model.Subscribe, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Subscribe) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubscribeDo
	Assign(attrs ...field.AssignExpr) ISubscribeDo
	Joins(fields ...field.RelationField) ISubscribeDo
	Preload(fields ...field.RelationField) ISubscribeDo
	FirstOrInit() (*model.Subscribe, error)
	FirstOrCreate() (*model.Subscribe, error)
	FindByPage(offset int, limit int) (result []*model.Subscribe, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubscribeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.Subscribe, err error)
	GetAll() (result []*model.Subscribe, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (s subscribeDo) GetByID(id int64) (result *model.Subscribe, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM subscribe WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
func (s subscribeDo) GetAll() (result []*model.Subscribe, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM subscribe ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s subscribeDo) Debug() ISubscribeDo {
	return s.withDO(s.DO.Debug())
}

func (s subscribeDo) WithContext(ctx context.Context) ISubscribeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subscribeDo) ReadDB() ISubscribeDo {
	return s.Clauses(dbresolver.Read)
}

func (s subscribeDo) WriteDB() ISubscribeDo {
	return s.Clauses(dbresolver.Write)
}

func (s subscribeDo) Session(config *gorm.Session) ISubscribeDo {
	return s.withDO(s.DO.Session(config))
}

func (s subscribeDo) Clauses(conds ...clause.Expression) ISubscribeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subscribeDo) Returning(value interface{}, columns ...string) ISubscribeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subscribeDo) Not(conds ...gen.Condition) ISubscribeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subscribeDo) Or(conds ...gen.Condition) ISubscribeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subscribeDo) Select(conds ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subscribeDo) Where(conds ...gen.Condition) ISubscribeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subscribeDo) Order(conds ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subscribeDo) Distinct(cols ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subscribeDo) Omit(cols ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subscribeDo) Join(table schema.Tabler, on ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subscribeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subscribeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subscribeDo) Group(cols ...field.Expr) ISubscribeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subscribeDo) Having(conds ...gen.Condition) ISubscribeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subscribeDo) Limit(limit int) ISubscribeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subscribeDo) Offset(offset int) ISubscribeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subscribeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscribeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subscribeDo) Unscoped() ISubscribeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subscribeDo) Create(values ...*model.Subscribe) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subscribeDo) CreateInBatches(values []*model.Subscribe, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subscribeDo) Save(values ...*model.Subscribe) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subscribeDo) First() (*model.Subscribe, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscribe), nil
	}
}

func (s subscribeDo) Take() (*model.Subscribe, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscribe), nil
	}
}

func (s subscribeDo) Last() (*model.Subscribe, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscribe), nil
	}
}

func (s subscribeDo) Find() ([]*model.Subscribe, error) {
	result, err := s.DO.Find()
	return result.([]*model.Subscribe), err
}

func (s subscribeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Subscribe, err error) {
	buf := make([]*model.Subscribe, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subscribeDo) FindInBatches(result *[]*model.Subscribe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subscribeDo) Attrs(attrs ...field.AssignExpr) ISubscribeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subscribeDo) Assign(attrs ...field.AssignExpr) ISubscribeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subscribeDo) Joins(fields ...field.RelationField) ISubscribeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subscribeDo) Preload(fields ...field.RelationField) ISubscribeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subscribeDo) FirstOrInit() (*model.Subscribe, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscribe), nil
	}
}

func (s subscribeDo) FirstOrCreate() (*model.Subscribe, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Subscribe), nil
	}
}

func (s subscribeDo) FindByPage(offset int, limit int) (result []*model.Subscribe, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subscribeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subscribeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subscribeDo) Delete(models ...*model.Subscribe) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subscribeDo) withDO(do gen.Dao) *subscribeDo {
	s.DO = *do.(*gen.DO)
	return s
}
